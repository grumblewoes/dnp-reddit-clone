@page "/CreatePost"
@using BlazorApp.Services
@using HttpClients.ClientInterfaces
@inject IPostService postService
@inject NavigationManager navMgr
@inject IAuthService authenticationService
@using System.Security.Claims
@using HttpClients.Implementations
@using Microsoft.AspNetCore.Components.Authorization

<AuthorizeView>
    <Authorized>
        <MudGrid>
            <MudItem xs="12" sm="7">
                <MudPaper Class="pa-4">
                    <MudForm ref="form" @bind-isValid="isSucced">
                        <MudText id="nickname" Typo="Typo.h3">@author</MudText>
                        <MudTextField T="string" Required="true" Label="Title" RequiredError="User name is required" @bind-Value="postTitle"></MudTextField>
                        <MudTextField id="bigText" T="string" Required="true" Label="Whats on your mind?.." RequiredError="text is required"
                                      Variant="Variant.Outlined" Lines="4" Counter="450" MaxLength="450" Immediate="true"
                                      @bind-Value="postBody"></MudTextField>
                        <MudButton id="create" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!isSucced)"
                                   Class="ml-auto" @onclick="Create">Create</MudButton>
                    </MudForm>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </Authorized>
    <NotAuthorized>
        <h3>YOU MUST BE LOGGED IN</h3>
        <MudAlert Type="AlertSeverity.Error">You must be logged in to create a post. Please log in or register.</MudAlert>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="RedirectToLogin">Log In</MudButton>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string postTitle;
    private string postBody;
    private string msg;
    private string? author;
    private bool isSucced;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private IEnumerable<Claim>? userClaims;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;

        userClaims = user.Claims;
        author = user.Claims.First(claim => claim.Type.Equals(ClaimTypes.Name)).Value.ToString();
    }

     private async Task Create()
        {
            try
            {
                await postService.CreateAsync(postTitle, postBody,author);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }
    
    private async Task RedirectToLogin()
    {
    // Redirect to the login page
        navMgr.NavigateTo("/Login");
    }

}
<style>
    #create{
    margin-top: 5%;
    }
    #nickname{
    margin-bottom: 5%;
    background-color: #f8ca91;
    border-radius: 5px;
    border-color: black;
    border-style: solid;
    border-width: 1px;
    padding: 5px;
    padding-left: 10px;
    padding-right: 10px;
           
    }
</style>

